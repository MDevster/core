<script>
    var EstateManager = {
<?= \ContaoEstateManager\FilterToggle::getEstateManagerConfig(); ?>
    };
</script>
<script>
  var EstateManagerFilter = (function () {

      'use strict';

      var EstateManagerFilter = function (options) {
          debugger;
          this.supports = !!document.querySelector; // Feature test

          // feature test and availability
          if (!this.supports || !document.querySelector(options.selector)) return;

          // Destroy any existing initializations
          this.destroy();

          this.defaults = {
              addBlankMarketingType: false,
              addBlankRealEstateType: false,
              filter: [],
              submitOnChange: false
          };

          // Merge user options with defaults
          this.settings = jovel.extend(true, this.defaults, options || {});

          this.form = document.querySelector(this.settings.selector);
          this.fieldMarketingType = document.querySelector(this.settings.selector + ' .real-estate-marketing-type');
          this.fieldRealEstateType = document.querySelector(this.settings.selector + ' .real-estate-type');
          this.toggleFilter = document.querySelectorAll(this.settings.selector + ' .real-estate-filter');

          // Set all event listener
          this.setEventListener();
      };

      EstateManagerFilter.prototype.destroy = function () {
          // If plugin isn't already initialized, stop
          if (!this.settings) return;

          // Reset variables
          this.settings = null;

          // Remove all event listener
          this.removeEventListener();
      };

      EstateManagerFilter.prototype.setEventListener = function () {
          if (this.fieldMarketingType)  this.fieldMarketingType.addEventListener('change', this.marketingTypeChanged.bind(this), false);
          if (this.fieldRealEstateType) this.fieldRealEstateType.addEventListener('change', this.realEstateTypeChanged.bind(this), false);
      };

      EstateManagerFilter.prototype.removeEventListener = function () {
          if (this.fieldMarketingType)  this.fieldMarketingType.removeEventListener('change', this.marketingTypeChanged, false);
          if (this.fieldRealEstateType) this.fieldRealEstateType.removeEventListener('change', this.realEstateTypeChanged, false);
      };

      EstateManagerFilter.prototype.marketingTypeChanged = function () {
          let firstSelected = false;
          let switchType = (this.settings.addBlankRealEstateType) ? ((EstateManager.types[this.fieldRealEstateType.value]) ? EstateManager.types[this.fieldRealEstateType.value].switchType : 0) : EstateManager.types[this.fieldRealEstateType.value].switchType;

          if (this.settings.addBlankRealEstateType === false) {
              for (var i=0; i<this.fieldRealEstateType.options.length;i++) {
                  if (this.fieldMarketingType.value) {
                      if (this.fieldRealEstateType.options[i].dataset.marketingType === this.fieldMarketingType.value) {
                          this.fieldRealEstateType.options[i].style.display = '';
                          if (this.fieldRealEstateType.options[i].value == switchType) {
                              this.fieldRealEstateType.options[i].selected = true;
                              this.realEstateTypeChanged();
                          } else if (switchType == 0 && !firstSelected && this.fieldRealEstateType.selectedOptions[0].dataset.marketingType != this.fieldMarketingType.value) {
                              this.fieldRealEstateType.options[i].selected = true;
                              firstSelected = true;
                              this.realEstateTypeChanged();
                          }
                      } else {
                          this.fieldRealEstateType.options[i].style.display = 'none';
                      }
                  } else {
                      this.fieldRealEstateType.options[i].style.display = '';
                  }
              }
          } else {
              if (this.settings.addBlankMarketingType === false) {
                  if (!switchType) {
                      this.fieldRealEstateType.options[0].selected = true;
                      this.realEstateTypeChanged();
                  }

                  for (var i=1; i<this.fieldRealEstateType.options.length;i++) {
                      if (this.fieldRealEstateType.options[i].dataset.marketingType === this.fieldMarketingType.value) {
                          this.fieldRealEstateType.options[i].style.display = '';
                          if (this.fieldRealEstateType.options[i].value == switchType) {
                              this.fieldRealEstateType.options[i].selected = true;
                              this.realEstateTypeChanged();
                          }
                      } else {
                          this.fieldRealEstateType.options[i].style.display = 'none';
                      }
                  }
              } else {
                  if (!switchType && (this.fieldRealEstateType.selectedOptions[0].dataset.marketingType != this.fieldMarketingType.value && this.fieldMarketingType.value)) {
                      this.fieldRealEstateType.options[0].selected = true;
                      this.realEstateTypeChanged();
                  }

                  for (var i=1; i<this.fieldRealEstateType.options.length;i++) {
                      if (this.fieldMarketingType.value) {
                          if (this.fieldRealEstateType.options[i].dataset.marketingType === this.fieldMarketingType.value) {
                              this.fieldRealEstateType.options[i].style.display = 'initial';
                              if (this.fieldRealEstateType.options[i].value == switchType) {
                                  this.fieldRealEstateType.options[i].selected = true;
                                  this.realEstateTypeChanged();
                              }
                          } else {
                              this.fieldRealEstateType.options[i].style.display = 'none';
                          }
                      } else {
                          this.fieldRealEstateType.options[i].style.display = '';
                      }
                  }
              }
          }
      };

      EstateManagerFilter.prototype.realEstateTypeChanged = function () {
          if (this.settings.submitOnChange) {
              this.form.submit();
          } else {
              for (let i=0; i<this.toggleFilter.length; i++) {
                  if (this.fieldRealEstateType.selectedOptions[0].value && this.fieldRealEstateType.selectedOptions[0].value !== 'miete_leasing' && this.fieldRealEstateType.selectedOptions[0].value !== 'kauf_erbpacht') {
                      if (EstateManager.types[this.fieldRealEstateType.selectedOptions[0].value].filter.indexOf(this.toggleFilter[i].dataset.group) >= 0) {
                          this.toggleFilter[i].style.display = '';
                      } else {
                          this.toggleFilter[i].style.display = 'none';
                      }
                  } else {
                      if (this.settings.filter.indexOf(this.toggleFilter[i].dataset.group) >= 0) {
                          this.toggleFilter[i].style.display = '';
                      } else {
                          this.toggleFilter[i].style.display = 'none';
                      }
                  }
              }
          }
      };

      return EstateManagerFilter;

  })();
</script>
<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        var estateManagerFilter = [];
        jovel.forEach(EstateManager.filters, function (settings, id) {
            settings.selector = 'form[data-filter-id="'+id+'"]';
            estateManagerFilter[i] = new EstateManagerFilter(settings);
        }, EstateManagerFilter);
    });
</script>
