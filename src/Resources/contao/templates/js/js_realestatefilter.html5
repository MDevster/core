<script>
    var EstateManager = {
<?= \ContaoEstateManager\FilterToggle::getEstateManagerConfig(); ?>
    };
</script>
<script>
    (function (root, factory) {
        if (typeof define === 'function' && define.amd) {
            define(['jovel'], factory(root));
        } else if (typeof exports === 'object') {
            module.exports = factory(require('jovel'));
        } else {
            root.EstateManagerFilter = factory(root, root.jovel);
        }
    })(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {

        'use strict';

        var EstateManagerFilter = {};

        var supports = !!document.querySelector && !!root.addEventListener; // Feature test

        var form, fieldMarketingType, fieldRealEstateType, toggleFilter, switchType, firstSelected;

        var settings, defaults = {
            addBlankMarketingType: false,
            addBlankRealEstateType: false,
            filter: [],
            submitOnChange: false
        };

        var marketingTypeChanged = function () {
            firstSelected = false;
            switchType = (settings.addBlankRealEstateType) ? ((EstateManager.types[fieldRealEstateType.value]) ? EstateManager.types[fieldRealEstateType.value].switchType : 0) : EstateManager.types[fieldRealEstateType.value].switchType;

            if (settings.addBlankRealEstateType === false) {
                for (var i=0; i<fieldRealEstateType.options.length;i++) {
                    if (fieldMarketingType.value) {
                        if (fieldRealEstateType.options[i].dataset.marketingType === fieldMarketingType.value) {
                            fieldRealEstateType.options[i].style.display = '';
                            if (fieldRealEstateType.options[i].value == switchType) {
                                fieldRealEstateType.options[i].selected = true;
                                realEstateTypeChanged();
                            } else if (switchType == 0 && !firstSelected && fieldRealEstateType.selectedOptions[0].dataset.marketingType != fieldMarketingType.value) {
                                fieldRealEstateType.options[i].selected = true;
                                firstSelected = true;
                                realEstateTypeChanged();
                            }
                        } else {
                            fieldRealEstateType.options[i].style.display = 'none';
                        }
                    } else {
                        fieldRealEstateType.options[i].style.display = '';
                    }
                }
            } else {
                if (settings.addBlankMarketingType === false) {
                    if (!switchType) {
                        fieldRealEstateType.options[0].selected = true;
                        realEstateTypeChanged();
                    }

                    for (var i=1; i<fieldRealEstateType.options.length;i++) {
                        if (fieldRealEstateType.options[i].dataset.marketingType === fieldMarketingType.value) {
                            fieldRealEstateType.options[i].style.display = '';
                            if (fieldRealEstateType.options[i].value == switchType) {
                                fieldRealEstateType.options[i].selected = true;
                                realEstateTypeChanged();
                            }
                        } else {
                            fieldRealEstateType.options[i].style.display = 'none';
                        }
                    }
                } else {
                    if (!switchType && (fieldRealEstateType.selectedOptions[0].dataset.marketingType != fieldMarketingType.value && fieldMarketingType.value)) {
                        fieldRealEstateType.options[0].selected = true;
                        realEstateTypeChanged();
                    }

                    for (var i=1; i<fieldRealEstateType.options.length;i++) {
                        if (fieldMarketingType.value) {
                            if (fieldRealEstateType.options[i].dataset.marketingType === fieldMarketingType.value) {
                                fieldRealEstateType.options[i].style.display = 'initial';
                                if (fieldRealEstateType.options[i].value == switchType) {
                                    fieldRealEstateType.options[i].selected = true;
                                    realEstateTypeChanged();
                                }
                            } else {
                                fieldRealEstateType.options[i].style.display = 'none';
                            }
                        } else {
                            fieldRealEstateType.options[i].style.display = '';
                        }
                    }
                }
            }
        };

        var realEstateTypeChanged = function () {
            if (settings.submitOnChange) {
                form.submit();
            } else {
                for (let i=0; i<toggleFilter.length; i++) {
                    if (fieldRealEstateType.selectedOptions[0].value && fieldRealEstateType.selectedOptions[0].value !== 'miete_leasing' && fieldRealEstateType.selectedOptions[0].value !== 'kauf_erbpacht') {
                        if (EstateManager.types[fieldRealEstateType.selectedOptions[0].value].filter.indexOf(toggleFilter[i].dataset.group) >= 0) {
                            toggleFilter[i].style.display = '';
                        } else {
                            toggleFilter[i].style.display = 'none';
                        }
                    } else {
                        if (settings.filter.indexOf(toggleFilter[i].dataset.group) >= 0) {
                            toggleFilter[i].style.display = '';
                        } else {
                            toggleFilter[i].style.display = 'none';
                        }
                    }
                }
            }
        };

        var setEventListener = function () {
            if (fieldMarketingType) fieldMarketingType.addEventListener('change', marketingTypeChanged, false);
            if (fieldRealEstateType) fieldRealEstateType.addEventListener('change', realEstateTypeChanged, false);
        };

        var removeEventListener = function () {
            if (fieldMarketingType) fieldMarketingType.removeEventListener('change', marketingTypeChanged, false);
            if (fieldRealEstateType) fieldRealEstateType.removeEventListener('change', realEstateTypeChanged, false);
        };

        /**
         * Destroy the current initialization.
         *
         * @public
         */
        EstateManagerFilter.destroy = function () {

            // If plugin isn't already initialized, stop
            if (!settings) return;

            // Reset variables
            settings = null;

            // Remove all event listener
            removeEventListener();
        };

        /**
         * Initialize EstateManagerFilter
         *
         * @public
         *
         * @param {Object} options   User settings
         */
        EstateManagerFilter.init = function (options) {
            // feature test and availability
            if (!supports || !document.querySelector(options.selector)) return;

            // Destroy any existing initializations
            EstateManagerFilter.destroy();

            // Merge user options with defaults
            settings = jovel.extend(true, defaults, options || {});

            form = document.querySelector(settings.selector);
            fieldMarketingType = document.querySelector(settings.selector + ' .real-estate-marketing-type');
            fieldRealEstateType = document.querySelector(settings.selector + ' .real-estate-type');
            toggleFilter = document.querySelectorAll(settings.selector + ' .real-estate-filter');

            // Set all event listener
            setEventListener();
        };

        return EstateManagerFilter;
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        jovel.forEach(EstateManager.filters, function (settings, id) {
            settings.selector = 'form[data-filter-id="'+id+'"]';
            EstateManagerFilter.init(settings);
        }, EstateManagerFilter);
    });
</script>
<script>
(function() {
    /*var marketingType = document.querySelector('select.real-estate-marketing-type');
    var type = document.querySelector('select.real-estate-type');
    var option = document.querySelectorAll('select.real-estate-type option');
    var filter = document.querySelectorAll('.real-estate-filter');
    var filterData = ImmoManager.filters[document.querySelector('[data-filter-id]').getAttribute('data-filter-id')];
    var defaultType = (filterData.addBlankOption) ? 0 : ImmoManager.defaultType;

    var addEventListener = function(el, eventName, handler) {
        if (el.addEventListener) {
            el.addEventListener(eventName, handler);
        } else {
            el.attachEvent('on' + eventName, function() {
                handler.call(el);
            });
        }
    };

    var triggerEvent = function(el, eventName, options) {
        var event;
        if (window.CustomEvent) {
            event = new CustomEvent(eventName, options);
        } else {
            event = document.createEvent('CustomEvent');
            event.initCustomEvent(eventName, true, true, options);
        }
        el.dispatchEvent(event);
    };

    var toggleOptions = function(initial=false) {
        let activeOption = document.querySelector('select.real-estate-type option:checked').value;
        activeOption = (activeOption) ? activeOption : 0;
        let switchType = ImmoManager.types[activeOption].switchType;
        switchType = (switchType == 0) ? defaultType : switchType;
        for (let i=0; i<option.length; i++) {
            if (parseInt(option[i].value) === switchType)
            {
                if (!initial) option[i].selected = true;
            }
            if (option[i].value === '0') continue;
            if (option[i].getAttribute('data-marketing-type') == marketingType.value) {
                option[i].style.display = '';
            } else {
                option[i].style.display = 'none';
            }
        }
        triggerEvent(type, 'change');
    };

    if (marketingType) {
        addEventListener(marketingType, 'change', function (e) {
            toggleOptions();
        });

        toggleOptions(true);
    }

    if (type.getAttribute('data-submit-on-change') == 1) {
        addEventListener(type, 'change', function (e) {
            e.currentTarget.form.submit();
        });
    } else {
        addEventListener(type, 'change', function (e) {
            let value = e.target.value ? e.target.value : 0;
            for (let i=0; i<filter.length; i++) {
                if (RealEstate.Config.filterCriteria[value].fields.indexOf(filter[i].getAttribute('data-group'))>=0) {
                    filter[i].style.display = '';
                } else {
                    filter[i].style.display = 'none';
                }
            }
        });
    }*/
})();
</script>
